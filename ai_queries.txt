# [reconnaissance]
Extract page title, detect tech and versions
Extract email addresses from web pages
Extract all subdomains referenced in web pages

# [low-hanging]
Find sensitive information in HTML comments (debug notes, API keys, credentials)
Find exposed .env files leaking credentials, API keys, and database passwords
Find exposed configuration files containing sensitive information
Find database configuration files leaking credentials
Find exposed Docker and Kubernetes configuration files containing secrets
Find exposed SSH keys and configuration files
Find exposed WordPress configuration files (wp-config.php)
Identify exposed .npmrc and .yarnrc files leaking NPM tokens
Identify open directory listings exposing sensitive files
Find exposed .git directories allowing full repo download
Find exposed .svn and .hg repositories leaking source code
Identify open FTP servers allowing anonymous access
Find GraphQL endpoints with introspection enabled
Identify exposed .well-known directories revealing sensitive data
Find publicly accessible phpinfo() pages leaking environment details
Find exposed API documentation (Swagger, Redocly, GraphiQL, API Blueprint)
Identify exposed .vscode and .idea directories leaking developer configs
Detect internal IP addresses in HTTP responses
Find exposed WordPress debug.log files leaking sensitive information
Detect misconfigured CORS allowing wildcard origins
Find publicly accessible backup and log files
Find exposed admin panels with default credentials
Identify commonly used API endpoints exposing sensitive user data
Detect web applications running in debug mode

# [mixed]
Detect debug endpoints revealing system information
Identify test and staging environments exposed to the internet
Find admin login endpoints, filter 404 response code
Find misconfigured CORS policies allowing wildcard origins
Detect exposed stack traces in error messages
Identify default credentials on login pages
Find misconfigured Apache/Nginx security headers
Check for APIs allowing unauthenticated access to admin routes
Identify exposed admin panels of popular CMS (WordPress, Joomla, etc.)

# [sensitive]
Scan for exposed environment files (.env) containing credentials
Find open directory listings and publicly accessible files
Detect exposed .git repositories and sensitive files
Identify publicly accessible backup and log files
Detect exposed .htaccess and .htpasswd files
Check for SSH private keys leaked in web directories
Find exposed API keys and secrets in responses and URLs
Identify API endpoints leaking sensitive data
Find leaked database credentials in JavaScript files
Scan for hardcoded credentials in source code comments
Identify sensitive endpoints leaking personal or internal data
Detect vulnerable API endpoints exposing user input or sensitive information
Find exposed server status pages (e.g., phpinfo, server-status)
Identify sensitive configuration files
Scan for information leaks in HTTP responses and headers

# [advanced]
Detect Host Header Injection
Detect open Docker API endpoints allowing remote access
Detect exposed Kubernetes API servers allowing unauthenticated access
Find open Kubernetes Dashboard instances with weak or no authentication
Detect exposed Kubernetes dashboards and APIs
Scan for cloud metadata endpoints accessible externally
Detect cloud storage buckets and scan for misconfigurations
Detect Azure Storage Account keys exposed in responses
Detect AWS keys exposed in responses and write extractors
Detect GCP keys exposed in responses and write extractors
Find web cache poisoning via various headers
Detect cache poisoning through 'X-Original-URL' and 'X-Rewrite-URL' headers
Identify cache poisoning by injecting payloads in 'Referer' and 'User-Agent'
Scan for cache poisoning via malformed HTTP headers
Detect cache poisoning vulnerabilities on Fastly and Cloudflare
Find misconfigured Varnish caching rules exposing private data
Identify Squid proxy cache poisoning vulnerabilities
